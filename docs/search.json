[{"path":"/articles/Example_RT_distribution.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Example Retention Time Distribution","text":"vignette serves application example analyzing inter-software differences flowTraceR. , focus retention time (RT). Note can easily changed characteristics intensity, charge state etc. can expanded metadata e.g. quantitative retention time precision.","code":""},{"path":"/articles/Example_RT_distribution.html","id":"loading-r-packages","dir":"Articles","previous_headings":"Introduction","what":"Loading R packages","title":"Example Retention Time Distribution","text":"","code":"library(flowTraceR) library(magrittr)  library(dplyr) library(tidyr) library(stringr) library(tibble) library(ggplot2)"},{"path":"/articles/Example_RT_distribution.html","id":"preparation","dir":"Articles","previous_headings":"Introduction","what":"Preparation","title":"Example Retention Time Distribution","text":"Use provided example data import data.","code":"# Get example data diann <- flowTraceR::get_example(\"RetentionTime\")[[\"DIA-NN\"]] spectronaut <- flowTraceR::get_example(\"RetentionTime\")[[\"Spectronaut\"]]"},{"path":"/articles/Example_RT_distribution.html","id":"conversion-to-standardized-format","dir":"Articles","previous_headings":"Introduction","what":"Conversion to standardized format","title":"Example Retention Time Distribution","text":"converting precursor, modified peptide proteingroup level use convert_all_levels().","code":"# Convert all levels diann_all_converted <- flowTraceR::convert_all_levels(input_df = diann, software = \"DIA-NN\") spectronaut_all_converted <- flowTraceR::convert_all_levels(input_df = spectronaut, software = \"Spectronaut\")"},{"path":[]},{"path":"/articles/Example_RT_distribution.html","id":"without-flowtracer","dir":"Articles","previous_headings":"RT distribution","what":"Without flowTraceR","title":"Example Retention Time Distribution","text":"Without conversion standardized format distinction common unique precursor identifications can made thus inter-software comparisons characteristics retention time possible.","code":"#Example - DIA-NN output  #Get common entries based on software-specific entries diann_common <- dplyr::semi_join(   diann_all_converted,   spectronaut_all_converted,   by = c(\"Precursor.Id\" = \"EG.PrecursorId\"))  #Get unique entries based on software-specific entries diann_unique <- dplyr::anti_join(   diann_all_converted,   spectronaut_all_converted,   by = c(\"Precursor.Id\" = \"EG.PrecursorId\"))  #Connect diann_all <- dplyr::bind_rows(   common = diann_common,   unique = diann_unique,   .id = \"characteristic\")  #Plot  #no common entries detected! ggplot2::ggplot(diann_all, aes(x = RT, color = characteristic)) +    geom_density() +   scale_x_continuous(limits = c(0,115))"},{"path":"/articles/Example_RT_distribution.html","id":"with-flowtracer","dir":"Articles","previous_headings":"RT distribution","what":"With flowTraceR","title":"Example Retention Time Distribution","text":"","code":"#Example - DIA-NN output  #Get common entries based on flowTraceR´s entries diann_common_traceR <- dplyr::semi_join(   diann_all_converted,   spectronaut_all_converted,   by = c(\"traceR_precursor\"))  #Get unique entries based on flowTraceR´s entries diann_unique_traceR <- dplyr::anti_join(   diann_all_converted,   spectronaut_all_converted,   by = c(\"traceR_precursor\"))  #Connect diann_traceR <- dplyr::bind_rows(   common = diann_common_traceR,   unique = diann_unique_traceR,   .id = \"characteristic\")  #Plot ggplot2::ggplot(diann_traceR, aes(x = RT, color = characteristic)) +    geom_density() +    scale_x_continuous(limits = c(0,115))"},{"path":[]},{"path":"/articles/Example_RT_distribution.html","id":"common-entries","dir":"Articles","previous_headings":"Inter-software comparison","what":"Common entries","title":"Example Retention Time Distribution","text":"inter-software comparison flowTraceR shows high similarity RT common precursor.","code":"#Spectronaut - common entries spectronaut_common_traceR <- dplyr::semi_join(   spectronaut_all_converted,   diann_all_converted,   by = c(\"traceR_precursor\")) %>%    dplyr::rename(RT = EG.ApexRT)  #Common combined RT_common <- dplyr::bind_rows(   \"DIA-NN\" = diann_common_traceR[,\"RT\"],   Spectronaut = spectronaut_common_traceR[, \"RT\"],   .id = \"Software\")  #Plot ggplot2::ggplot(RT_common, aes(x = RT, color = Software)) +    geom_density() +   scale_x_continuous(limits = c(0,115))"},{"path":"/articles/Example_RT_distribution.html","id":"unique-entries","dir":"Articles","previous_headings":"Inter-software comparison","what":"Unique entries","title":"Example Retention Time Distribution","text":"","code":"#Spectronaut unique entries spectronaut_unique_traceR <- dplyr::anti_join(   spectronaut_all_converted,   diann_all_converted,   by = c(\"traceR_precursor\")) %>%    dplyr::rename(RT = EG.ApexRT)  #Unique entries combined RT_unique <- dplyr::bind_rows(   \"DIA-NN\" = diann_unique_traceR[,\"RT\"],   Spectronaut = spectronaut_unique_traceR[, \"RT\"],   .id = \"Software\" )  #Plot ggplot2::ggplot(RT_unique, aes(x = RT, color = Software)) +    geom_density() +   scale_x_continuous(limits = c(0,115))"},{"path":"/articles/Requirements.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Requirements","text":"vignette gives overview requirements flowTraceR. outputs following software applications supported: Spectronaut (v15) MaxQuant (v2.0.3) DIA-NN (v1.8) Proteome Discoverer (v2.4)","code":""},{"path":"/articles/Requirements.html","id":"spectronaut","dir":"Articles","previous_headings":"Introduction","what":"Spectronaut","title":"Requirements","text":"flowTraceR following columns required: PG.ProteinGroups (User Manual definition: One several protein groups) EG.PrecursorId (User Manual definition: Unique Id precursor: [modified sequence] plus [charge])","code":""},{"path":"/articles/Requirements.html","id":"maxquant","dir":"Articles","previous_headings":"Introduction","what":"MaxQuant","title":"Requirements","text":"flowTraceR following files respective columns required: Modified sequence (User Manual definition: Sequence representation including post-translational modifications) Charge (User Manual definition: charge-state precursor ion) Protein group IDs (User Manual definition: identifier protein-group redundant peptide sequence associated , can used look extended protein information file ‘proteinGroups.txt’.) ProteinIDs (User Manual definition: Identifier(s) protein(s) contained protein group) id (User Manual definition: unique (consecutive) identifier row proteinGroups table, used cross-link information file information stored files.)","code":""},{"path":"/articles/Requirements.html","id":"dia-nn","dir":"Articles","previous_headings":"Introduction","what":"DIA-NN","title":"Requirements","text":"flowTraceR following columns required: Precursor.Id Protein.Group (User Manual definition: inferred proteins)","code":""},{"path":"/articles/Requirements.html","id":"proteome-discoverer","dir":"Articles","previous_headings":"Introduction","what":"Proteome Discoverer","title":"Requirements","text":"flowTraceR following files respective columns required: Protein Accessions (User Manual definition: Displays unique identifiers (accessions) proteins include given peptide sequence.) Annotated Sequence (User Manual definition: Displays names flanking residues peptide protein.) Modifications (User Manual definition: Displays static dynamic modifications identified peptide.) Charge (User Manual definition: Displays charge state peptide.)","code":""},{"path":"/articles/Workflow.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Workflow","text":"vignette workflow template including import, conversion standard format highlighting inter-software proteinGroup denotation differences flowTraceR.","code":""},{"path":"/articles/Workflow.html","id":"loading-r-packages","dir":"Articles","previous_headings":"Introduction","what":"Loading R packages","title":"Workflow","text":"","code":"library(flowTraceR) library(magrittr) library(dplyr) library(tidyr) library(stringr) library(tibble) library(ggplot2) library(data.table) library(kableExtra)"},{"path":[]},{"path":"/articles/Workflow.html","id":"import-your-data","dir":"Articles","previous_headings":"Import","what":"Import your data","title":"Workflow","text":"Importing output files software can easily performed data.table::fread().","code":"diann <- data.table::fread(\"DIRECTORY/dia-nn_file.tsv\") spectronaut <- data.table::fread(\"DIRECTORY/spectronaut_file.tsv\") mq_evidence <- data.table::fread(\"DIRECTORY/maxquant_evidence.txt\") mq_proteinGroups <- data.table::fread(\"DIRECTORY/maxquant_proteinGroups.txt\") pd_psm <- data.table::fread(\"DIRECTORY/pd_PSMs.txt\")"},{"path":"/articles/Workflow.html","id":"examples","dir":"Articles","previous_headings":"Import","what":"Examples","title":"Workflow","text":"examples provided explore workflow.","code":"#DIA-NN diann <- flowTraceR::get_example(\"DIA-NN\")  #Spectronaut spectronaut <- flowTraceR::get_example(\"Spectronaut\")  #MaxQuant mq_evidence <- flowTraceR::get_example(\"MaxQuant\")[[\"evidence\"]]  mq_proteinGroups <- flowTraceR::get_example(\"MaxQuant\")[[\"proteinGroups\"]]  #PD pd_psm <- flowTraceR::get_example(\"PD\")"},{"path":"/articles/Workflow.html","id":"conversion-to-standardized-format","dir":"Articles","previous_headings":"","what":"Conversion to standardized format","title":"Workflow","text":"input data can converted standardized output format precursor, modified peptide proteingroup level. generated columns flowTraceR appendend submitted data without filtering performed. generated columns denoted prefix traceR. Note modifications UniMod:35 (Oxidation) UniMod:4 (Carbamidomethyl) supported flowTraceR. column appendix unknownMods generated potentially filter modifications supported: TRUE, unknown modification detected.","code":""},{"path":"/articles/Workflow.html","id":"precursor","dir":"Articles","previous_headings":"Conversion to standardized format","what":"Precursor","title":"Workflow","text":"converting precursor level use convert_precursor().","code":"diann_precursor_converted <- convert_precursor(input_df = diann, software = \"DIA-NN\") spectronaut_precursor_converted <- convert_precursor(input_df = spectronaut, software = \"Spectronaut\") mq_precursor_converted <- convert_precursor(input_df = mq_evidence, software = \"MaxQuant\") pd_precursor_converted <- convert_precursor(input_df = pd_psm, software = \"PD\")"},{"path":"/articles/Workflow.html","id":"modified-peptides","dir":"Articles","previous_headings":"Conversion to standardized format","what":"Modified Peptides","title":"Workflow","text":"converting modified peptide level use convert_modified_peptides().","code":"diann_peptides_converted <- convert_modified_peptides(input_df = diann, software = \"DIA-NN\") spectronaut_peptides_converted <- convert_modified_peptides(input_df = spectronaut, software = \"Spectronaut\") mq_peptides_converted <- convert_modified_peptides(input_df = mq_evidence, software = \"MaxQuant\") pd_peptides_converted <- convert_modified_peptides(input_df = pd_psm, software = \"PD\")"},{"path":"/articles/Workflow.html","id":"proteingroups","dir":"Articles","previous_headings":"Conversion to standardized format","what":"ProteinGroups","title":"Workflow","text":"converting proteinGroup level use convert_proteingroups().","code":"diann_proteinGroups_converted <- convert_proteingroups(input_df = diann, software = \"DIA-NN\") spectronaut_proteinGroups_converted <- convert_proteingroups(input_df = spectronaut, software = \"Spectronaut\") mq_proteinGroups_converted <- convert_proteingroups(input_df = mq_proteinGroups, software = \"MaxQuant\") pd_proteinGroups_converted <- convert_proteingroups(input_df = pd_psm, software = \"PD\")"},{"path":"/articles/Workflow.html","id":"all-levels","dir":"Articles","previous_headings":"Conversion to standardized format","what":"All Levels","title":"Workflow","text":"converting precursor, modified peptide proteingroup level use convert_all_levels().","code":"diann_all_converted <- convert_all_levels(input_df = diann, software = \"DIA-NN\") spectronaut_all_converted <- convert_all_levels(input_df = spectronaut, software = \"Spectronaut\") mq_all_converted <- convert_all_levels(input_df = mq_evidence, input_MQ_pg = mq_proteinGroups, software = \"MaxQuant\") pd_all_converted <- convert_all_levels(input_df = pd_psm, software = \"PD\")"},{"path":"/articles/Workflow.html","id":"analyzing-conversion","dir":"Articles","previous_headings":"Conversion to standardized format","what":"Analyzing Conversion","title":"Workflow","text":"Since modifications UniMod:35 (Oxidation) UniMod:4 (Carbamidomethyl) currently supported, flowTraceR provides functions analyze conversion shows much unknown modifications present dataset analyze_unknown_mods().","code":"#For one software example - equivalent for others.  #Proteome Discoverer #Reports pd_precursor_report_unknown_mods <- analyze_unknown_mods(input_df = pd_precursor_converted, level = \"precursor\", plot = FALSE) pd_peptides_report_unknown_mods <- analyze_unknown_mods(input_df = pd_peptides_converted, level = \"modified_peptides\", plot = FALSE)  #Plots pd_precursor_plot_unknown_mods <- analyze_unknown_mods(input_df = pd_precursor_converted, level = \"precursor\", plot = TRUE, plot_characteristic = \"absolute\") pd_peptides_plot_unknown_mods <- analyze_unknown_mods(input_df = pd_peptides_converted, level = \"modified_peptides\", plot = TRUE, plot_characteristic = \"relative\")"},{"path":"/articles/Workflow.html","id":"example-precursor-level","dir":"Articles","previous_headings":"Conversion to standardized format > Analyzing Conversion","what":"Example precursor level","title":"Workflow","text":"   ","code":"kableExtra::kable(pd_precursor_report_unknown_mods) pd_precursor_plot_unknown_mods"},{"path":"/articles/Workflow.html","id":"tracing-inter-software-differences","dir":"Articles","previous_headings":"","what":"Tracing inter-software differences","title":"Workflow","text":"binary software comparisons flowTraceR allows trace inter-software differences based standardized flowTraceR format. identification classified common - identified analyses unique - specific one analysis.","code":""},{"path":"/articles/Workflow.html","id":"for-each-individual-level","dir":"Articles","previous_headings":"Tracing inter-software differences","what":"For each individual level","title":"Workflow","text":"","code":"#Binary Comparison - DIA-NN vs. Spectronaut  #ProteinGroup level traced_proteinGroups <- trace_level(input_df1 = diann_all_converted , input_df2 = spectronaut_all_converted, analysis_name1 = \"DIA-NN\", analysis_name2 = \"Spectronaut\", level = \"proteinGroups\", filter_unknown_mods = TRUE)  #Peptide level traced_peptides <- trace_level(input_df1 = diann_all_converted, input_df2 = spectronaut_all_converted, analysis_name1 = \"DIA-NN\", analysis_name2 = \"Spectronaut\", level = \"modified_peptides\", filter_unknown_mods = TRUE)  #Precursor level traced_precursor <- trace_level(input_df1 = diann_all_converted, input_df2 = spectronaut_all_converted, analysis_name1 = \"DIA-NN\", analysis_name2 = \"Spectronaut\", level = \"precursor\", filter_unknown_mods = TRUE)"},{"path":"/articles/Workflow.html","id":"all-levels-1","dir":"Articles","previous_headings":"Tracing inter-software differences","what":"All levels","title":"Workflow","text":"","code":"#Binary Comparison - DIA-NN vs. Spectronaut  #trace all levels in one step traced_all <- trace_all_levels(input_df1 = diann_all_converted, input_df2 = spectronaut_all_converted, analysis_name1 = \"DIA-NN\", analysis_name2 = \"Spectronaut\", filter_unknown_mods = TRUE)"},{"path":"/articles/Workflow.html","id":"connect-traced-levels","dir":"Articles","previous_headings":"Tracing inter-software differences","what":"Connect traced levels","title":"Workflow","text":"Combine two levels categorization unique common entries. Possible connections proteinGroup modified peptide precursor categorization.","code":"#ProteinGroup level DIANN_connected_proteinGroup <- connect_traceR_levels(input_df = traced_all[[\"DIA-NN\"]], level = \"proteinGroups\") Spectronaut_connected_proteinGroup <- connect_traceR_levels(input_df = traced_all[[\"Spectronaut\"]], level = \"proteinGroups\")  #Peptide level DIANN_connected_peptides <- connect_traceR_levels(input_df = traced_all[[\"DIA-NN\"]], level = \"modified_peptides\") Spectronaut_connected_peptides <- connect_traceR_levels(input_df = traced_all[[\"Spectronaut\"]], level = \"modified_peptides\")"},{"path":"/articles/Workflow.html","id":"show-software-differences-for-modified-peptideproteingroup-denotations","dir":"Articles","previous_headings":"Tracing inter-software differences","what":"Show software differences for modified peptide/proteinGroup denotations","title":"Workflow","text":"Generate report visualize output connecting flowTraceR levels proteinGroup_precursor modified.peptides_precursor categorization : common_common common_unique unique_common unique_unique","code":"#Example for proteinGroup level  #*Plots* #upper level - proteinGroup level - how many proteingroups have a specific categorization DIANN_plot_proteinGroups_upper <- analyze_connected_levels(input_df = DIANN_connected_proteinGroup, connected_levels = \"proteinGroup_precursor\",count_level = \"upper\", plot = TRUE, plot_characteristic = \"absolute\")  Spectronaut_plot_proteinGroups_upper <- analyze_connected_levels(input_df = Spectronaut_connected_proteinGroup, connected_levels = \"proteinGroup_precursor\", count_level = \"upper\", plot = TRUE, plot_characteristic = \"absolute\")  #lower level - precursor level - how many precursor have a specific categorization DIANN_plot_proteinGroups_lower <- analyze_connected_levels(input_df = DIANN_connected_proteinGroup, connected_levels = \"proteinGroup_precursor\",count_level = \"lower\", plot = TRUE, plot_characteristic = \"absolute\")  Spectronaut_plot_proteinGroups_lower <- analyze_connected_levels(input_df = Spectronaut_connected_proteinGroup, connected_levels = \"proteinGroup_precursor\", count_level = \"lower\", plot = TRUE, plot_characteristic = \"absolute\")   #*Reports* #ProteinGroup level DIANN_report_proteinGroups <- analyze_connected_levels(input_df = DIANN_connected_proteinGroup, connected_levels = \"proteinGroup_precursor\",count_level = \"upper\", plot = FALSE)  Spectronaut_report_proteinGroups <- analyze_connected_levels(input_df = Spectronaut_connected_proteinGroup, connected_levels = \"proteinGroup_precursor\",count_level = \"lower\", plot = FALSE)"},{"path":"/articles/Workflow.html","id":"example-proteingroup-level","dir":"Articles","previous_headings":"Tracing inter-software differences > Show software differences for modified peptide/proteinGroup denotations","what":"Example proteinGroup level","title":"Workflow","text":"   ","code":"kableExtra::kable(DIANN_report_proteinGroups) DIANN_plot_proteinGroups_upper"},{"path":"/articles/Workflow.html","id":"get-software-difference-for-proteingroup-denotations","dir":"Articles","previous_headings":"Tracing inter-software differences","what":"Get software difference for proteinGroup denotations","title":"Workflow","text":"Filter potential common precursor unique proteinGroup connections. possible trace differences proteinGroup denotations common precursor.","code":"#with string_analysis = TRUE - if protein denotation is mentioned in both proteinGroups of input_df1/_df2 are filtered out - only distinct protein denotations remain  Difference_proteinGroup <- trace_unique_common_pg(input_df1 = DIANN_connected_proteinGroup, input_df2 = Spectronaut_connected_proteinGroup, analysis_name1 = \"DIA-NN\", analysis_name2 = \"Spectronaut\", string_analysis = FALSE)  Difference_proteinGroup_reduced <- trace_unique_common_pg(input_df1 = DIANN_connected_proteinGroup, input_df2 = Spectronaut_connected_proteinGroup, analysis_name1 = \"DIA-NN\", analysis_name2 = \"Spectronaut\", string_analysis = TRUE)"},{"path":"/articles/Workflow.html","id":"results","dir":"Articles","previous_headings":"Tracing inter-software differences > Get software difference for proteinGroup denotations","what":"Results:","title":"Workflow","text":"  Difference proteinGroup denotation - string_analysis = FALSE       Difference proteinGroup denotation - string_analysis = TRUE","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Oliver Kardell. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kardell O (2022). flowTraceR: Tracing Information Flow Inter-Software Comparisons Mass Spectrometry-Based Bottom-Proteomics. R package version 0.1.0, https://github.com/OKdll/flowTraceR.","code":"@Manual{,   title = {flowTraceR: Tracing Information Flow for Inter-Software Comparisons in Mass Spectrometry-Based Bottom-Up Proteomics},   author = {Oliver Kardell},   year = {2022},   note = {R package version 0.1.0},   url = {https://github.com/OKdll/flowTraceR}, }"},{"path":"/index.html","id":"flowtracer-","dir":"","previous_headings":"","what":"Tracing Information Flow for Inter-Software Comparisons in Mass Spectrometry-Based Bottom-Up Proteomics","title":"Tracing Information Flow for Inter-Software Comparisons in Mass Spectrometry-Based Bottom-Up Proteomics","text":"flowTraceR R package enabling researchers perform inter-software comparisons common proteomic software tools. can used analyze label-free mass spectrometry-based experiments data-depended data-independent spectral acquisition.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tracing Information Flow for Inter-Software Comparisons in Mass Spectrometry-Based Bottom-Up Proteomics","text":"Install development version GitHub using devtools package using following commands:","code":"# install.packages(\"devtools\") #remove \"#\" if you do not have devtools package installed yet devtools::install_github(\"OKdll/flowTraceR\", dependencies = TRUE) # use dependencies TRUE to install all required packages for flowTraceR"},{"path":[]},{"path":"/index.html","id":"requirements","dir":"","previous_headings":"Preparation","what":"Requirements","title":"Tracing Information Flow for Inter-Software Comparisons in Mass Spectrometry-Based Bottom-Up Proteomics","text":"input standard outputs ProteomeDiscoverer, Spectronaut, DIA-NN MaxQuant supported flowTraceR. Details requirements listed vignette Requirements.","code":""},{"path":"/index.html","id":"import","dir":"","previous_headings":"Preparation","what":"Import","title":"Tracing Information Flow for Inter-Software Comparisons in Mass Spectrometry-Based Bottom-Up Proteomics","text":"Importing output files software can easily performed data.table::fread().","code":"diann <- data.table::fread(\"DIRECTORY/dia-nn_file.tsv\") spectronaut <- data.table::fread(\"DIRECTORY/spectronaut_file.tsv\") mq_evidence <- data.table::fread(\"DIRECTORY/maxquant_evidence.txt\") mq_proteinGroups <- data.table::fread(\"DIRECTORY/maxquant_proteinGroups.txt\") pd_psm <- data.table::fread(\"DIRECTORY/pd_PSMs.txt\")"},{"path":"/index.html","id":"load-packages","dir":"","previous_headings":"Preparation","what":"Load packages","title":"Tracing Information Flow for Inter-Software Comparisons in Mass Spectrometry-Based Bottom-Up Proteomics","text":"","code":"#load libraries  library(flowTraceR) library(magrittr)  library(dplyr) library(tidyr) library(stringr) library(tibble) library(ggplot2) library(data.table) library(kableExtra)"},{"path":"/index.html","id":"example---trace-proteingroups","dir":"","previous_headings":"","what":"Example - trace proteinGroups","title":"Tracing Information Flow for Inter-Software Comparisons in Mass Spectrometry-Based Bottom-Up Proteomics","text":"basic example demonstrates trace inter-software differences proteinGroup denotations common precursor identifications. Please check vignette Workflow detailed analysis pipeline functionalities. table shows differences proteingroup denotations common precursor (traceR_precursor) DIA-NN (traceR_proteinGroups_DIA-NN) Spectronaut (traceR_proteinGroups_Spectronaut). Difference proteinGroup denotation","code":"#DIA-NN diann <- get_example(\"DIA-NN\") #Spectronaut spectronaut <- get_example(\"Spectronaut\")  #convert to standardized format diann_all_converted <- convert_all_levels(input_df = diann, software = \"DIA-NN\") spectronaut_all_converted <- convert_all_levels(input_df = spectronaut, software = \"Spectronaut\")  #trace identifications in binary comparison traced_all <- trace_all_levels(input_df1 = diann_all_converted, input_df2 = spectronaut_all_converted, analysis_name1 = \"DIA-NN\", analysis_name2 = \"Spectronaut\", filter_unknown_mods = TRUE)  #connect traced levels - proteinGroups_precursor DIANN_connected_proteinGroup <- connect_traceR_levels(input_df = traced_all[[\"DIA-NN\"]], level = \"proteinGroups\") Spectronaut_connected_proteinGroup <- connect_traceR_levels(input_df = traced_all[[\"Spectronaut\"]], level = \"proteinGroups\")  #trace differences in proteinGroup dentotation for common precursor identification Difference_proteinGroup <- trace_unique_common_pg(input_df1 = DIANN_connected_proteinGroup, input_df2 = Spectronaut_connected_proteinGroup, analysis_name1 = \"DIA-NN\", analysis_name2 = \"Spectronaut\", string_analysis = TRUE) kableExtra::kable(Difference_proteinGroup, format = \"pipe\", caption = \"Difference in proteinGroup denotation\")"},{"path":"/index.html","id":"example---inter-software-comparison-of-retention-times","dir":"","previous_headings":"","what":"Example - Inter-software comparison of retention times","title":"Tracing Information Flow for Inter-Software Comparisons in Mass Spectrometry-Based Bottom-Up Proteomics","text":"basic example shows power flowTraceR´s conversion standardized level (precursor, modified peptides, proteinGroup) output highlighting inter-software comparison retention times. Please check vignette Example_RT_distribution detailed view analysis flowTraceR without flowTraceR.","code":"#DIA-NN diann <- get_example(\"RetentionTime\")[[\"DIA-NN\"]] #Spectronaut spectronaut <- get_example(\"RetentionTime\")[[\"Spectronaut\"]]  #flowTraceR - Conversion diann_all_converted <- convert_all_levels(input_df = diann, software = \"DIA-NN\") spectronaut_all_converted <- convert_all_levels(input_df = spectronaut, software = \"Spectronaut\")  #Get common entries diann_common_traceR <- dplyr::semi_join(   diann_all_converted,   spectronaut_all_converted,   by = c(\"traceR_precursor\"))  spectronaut_common_traceR <- dplyr::semi_join(   spectronaut_all_converted,   diann_all_converted,   by = c(\"traceR_precursor\")) %>%    dplyr::rename(RT = EG.ApexRT)  #Combine RT_common <- dplyr::bind_rows(   \"DIA-NN\" = diann_common_traceR[,\"RT\"],   Spectronaut = spectronaut_common_traceR[, \"RT\"],   .id = \"Software\")  #Plot ggplot2::ggplot(RT_common, aes(x = RT, color = Software)) +    geom_density()"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Oliver Kardell Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/analyze_connected_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis of connected levels — analyze_connected_levels","title":"Analysis of connected levels — analyze_connected_levels","text":"Analysis traceR_connected_pg_prec traceR_connected_mod.pep_prec column","code":""},{"path":"/reference/analyze_connected_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis of connected levels — analyze_connected_levels","text":"","code":"analyze_connected_levels(   input_df,   connected_levels = c(\"proteinGroup_precursor\", \"mod.peptides_precursor\"),   count_level = c(\"upper\", \"lower\"),   plot = TRUE,   plot_characteristic = c(\"absolute\", \"relative\") )"},{"path":"/reference/analyze_connected_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis of connected levels — analyze_connected_levels","text":"input_df tibble flowTraceR´s connected level information e.g. traceR_connected_pg_prec. connected_levels Choose either proteinGroup_precursor mod.peptides_precursor corresponding traceR connection. Default proteinGroup_precursor. count_level Counts appearances per possible connections. Choose either upper lower - lower always precursor level; upper either proteingroup mod.peptide level depending chosen connected_levels. Default upper. Duplicate entries removed. plot Logical value, default TRUE. TRUE barplot generated, FALSE report output. plot_characteristic absolute absolute count displayed barplot, relative relative count displayed barplot. Default absolute. plot_characteristic influence report.","code":""},{"path":"/reference/analyze_connected_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analysis of connected levels — analyze_connected_levels","text":"function returns plot - absolute/relative counts - data frame.","code":""},{"path":"/reference/analyze_connected_levels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analysis of connected levels — analyze_connected_levels","text":"Shows absolute relative counts possible connections - unique_unique/unique_common/common_unique/common_common respective column - report plot.","code":""},{"path":"/reference/analyze_connected_levels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Analysis of connected levels — analyze_connected_levels","text":"Oliver Kardell","code":""},{"path":"/reference/analyze_connected_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analysis of connected levels — analyze_connected_levels","text":"","code":"# Load libraries library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(stringr) library(ggplot2) #> Warning: package 'ggplot2' was built under R version 4.0.5 library(tibble)  # DIA-NN example data data <- tibble::tibble(   \"traceR_connected_pg_prec\" = c(\"common_common\", \"common_unique\", \"unique_common\"),   \"traceR_traced_proteinGroups\" = c(\"common\", \"common\", \"unique\"),   \"traceR_traced_mod.peptides\" = c(\"common\", \"unique\", \"common\"),   \"traceR_traced_precursor\" = c(\"common\", \"unique\", \"common\"),   \"traceR_proteinGroups\" = c(\"P02768\", \"P02671\", \"Q92496\"),   \"traceR_precursor\" = c(\"AAC(UniMod:4)LLPK1\", \"RLEVDIDIK2\", \"EGIVEYPR2\") )  # Upper level - proteingroup level - how many proteingroups have a specific categorization # Plot analyze_connected_levels(input_df = data,  connected_levels = \"proteinGroup_precursor\",  count_level = \"upper\",  plot = TRUE,  plot_characteristic = \"relative\")   #Report analyze_connected_levels(input_df = data,  connected_levels = \"proteinGroup_precursor\",  count_level = \"upper\",  plot = FALSE) #> # A tibble: 3 x 3 #>   Connected_proteinGroups_precursor absolute_count relative_count #> * <chr>                                      <int>          <dbl> #> 1 common_common                                  1           33.3 #> 2 common_unique                                  1           33.3 #> 3 unique_common                                  1           33.3"},{"path":"/reference/analyze_unknown_mods.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis of unknown modifications — analyze_unknown_mods","title":"Analysis of unknown modifications — analyze_unknown_mods","text":"Analysis traceR_precursor_unknownMods traceR_mod.peptides_unknownMods column","code":""},{"path":"/reference/analyze_unknown_mods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis of unknown modifications — analyze_unknown_mods","text":"","code":"analyze_unknown_mods(   input_df,   level = c(\"precursor, modified_peptides\"),   plot = TRUE,   plot_characteristic = c(\"absolute\", \"relative\") )"},{"path":"/reference/analyze_unknown_mods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis of unknown modifications — analyze_unknown_mods","text":"input_df tibble traceR_precursor_unknownMods traceR_mod.peptides_unknownMods column. level Choose either precursor traceR_precursor_unknownMods modified_peptides traceR_mod.peptides_unknownMods. Default precursor. plot Logical value, default TRUE. TRUE barplot generated, FALSE report output. plot_characteristic absolute absolute count displayed barplot, relative relative count displayed barplot. Default absolute. plot_characteristic influence report.","code":""},{"path":"/reference/analyze_unknown_mods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analysis of unknown modifications — analyze_unknown_mods","text":"function returns plot - absolute/relative counts - data frame.","code":""},{"path":"/reference/analyze_unknown_mods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analysis of unknown modifications — analyze_unknown_mods","text":"Shows absolute relative counts TRUE/FALSE traceR_precursor_unknownMods traceR_mod.peptides_unknownMods column - data frame plot. Duplicate traceR_mod.peptides entries traceR_precursor entries removed, respectively.","code":""},{"path":"/reference/analyze_unknown_mods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Analysis of unknown modifications — analyze_unknown_mods","text":"Oliver Kardell","code":""},{"path":"/reference/analyze_unknown_mods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analysis of unknown modifications — analyze_unknown_mods","text":"","code":"# Load libraries library(dplyr) library(stringr) library(ggplot2) library(tibble)  # Generate data data <- tibble::tibble(  \"traceR_mod.peptides\" = c(\"AACLLPK\",   \"ALTDM(UniMod:35)PQM(UniMod:35)R\",   \"ALTDM(DummyModification)PQMK\",   \"ALTDM(UniMod:35)PQM(UniMod:35)R\",   \"ALTDM(DummyModification)PQMK\"),  \"traceR_mod.peptides_unknownMods\" = c(FALSE, FALSE, TRUE, FALSE, TRUE),  \"traceR_precursor\" = c(\"AACLLPK2\",   \"ALTDM(UniMod:35)PQM(UniMod:35)R2\",   \"ALTDM(DummyModification)PQMK3\",   \"ALTDM(UniMod:35)PQM(UniMod:35)R2\",   \"ALTDM(DummyModification)PQMK3\"),  \"traceR_precursor_unknownMods\" = c(FALSE, FALSE, TRUE, FALSE, TRUE) )  # Generate Report - precursor level analyze_unknown_mods(  input_df = data,  level = \"precursor\",  plot = FALSE ) #> # A tibble: 2 x 3 #>   Unknown_Modifications absolute_count relative_count #> * <lgl>                          <int>          <dbl> #> 1 FALSE                              2           66.7 #> 2 TRUE                               1           33.3  # Generate relative Plot - peptide level analyze_unknown_mods(  input_df = data,  level = \"modified_peptides\",  plot = TRUE,  plot_characteristic = \"relative\" )"},{"path":"/reference/connect_traceR_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Connects traced levels — connect_traceR_levels","title":"Connects traced levels — connect_traceR_levels","text":"Connects two levels categorization unique common entries.","code":""},{"path":"/reference/connect_traceR_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connects traced levels — connect_traceR_levels","text":"","code":"connect_traceR_levels(   input_df,   level = c(\"proteinGroups\", \"modified_peptides\") )"},{"path":"/reference/connect_traceR_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connects traced levels — connect_traceR_levels","text":"input_df tibble flowTraceR´s traced level information e.g. traceR_traced_proteinGroups. level Choose proteinGroups modified_peptides. Connection proteinGroups/modified_peptides precursor categorization. Default proteinGroups.","code":""},{"path":"/reference/connect_traceR_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connects traced levels — connect_traceR_levels","text":"function returns tibble one following columns depending chosen level: traceR_connected_pg_prec - connection proteinGroup categorization precursor categorization. traceR_connected_mod.pep_prec - connection modified peptide categorization precursor categorization.","code":""},{"path":"/reference/connect_traceR_levels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Connects traced levels — connect_traceR_levels","text":"Based flowTraceR´s categorization unique common identifications two levels connected. Possible connections proteinGroup modified peptide precursor categorization.","code":""},{"path":"/reference/connect_traceR_levels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Connects traced levels — connect_traceR_levels","text":"Oliver Kardell","code":""},{"path":"/reference/connect_traceR_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connects traced levels — connect_traceR_levels","text":"","code":"# Load libraries library(tidyr) library(stringr) library(tibble)  # DIA-NN example data diann <- tibble::tibble(    \"traceR_traced_proteinGroups\" = c(\"common\", \"common\", \"unique\"),    \"traceR_traced_mod.peptides\" = c(\"common\", \"unique\", \"common\"),    \"traceR_traced_precursor\" = c(\"common\", \"unique\", \"common\"),    \"traceR_proteinGroups\" = c(\"P02768\", \"P02671\", \"Q92496\"),    \"traceR_mod.peptides\" = c(\"AAC(UniMod:4)LLPK\", \"RLEVDIDIK\", \"EGIVEYPR\"),    \"traceR_mod.peptides_unknownMods\" = c(FALSE, FALSE, FALSE),    \"traceR_precursor\" = c(\"AAC(UniMod:4)LLPK1\", \"RLEVDIDIK2\", \"EGIVEYPR2\"),    \"traceR_precursor_unknownMods\" = c(FALSE, FALSE, FALSE) )  spectronaut <- tibble::tibble(    \"traceR_traced_proteinGroups\" = c(\"common\", \"common\", \"unique\"),    \"traceR_traced_mod.peptides\" = c(\"common\", \"unique\", \"common\"),    \"traceR_traced_precursor\" = c(\"common\", \"unique\", \"common\"),    \"traceR_proteinGroups\" = c(\"P02768\", \"P02671\", \"Q02985\"),    \"traceR_mod.peptides\" = c(\"AAC(UniMod:4)LLPK\", \"M(UniMod:35)KPVPDLVPGNFK\", \"EGIVEYPR\"),    \"traceR_mod.peptides_unknownMods\" = c(FALSE, FALSE, FALSE),    \"traceR_precursor\" = c(\"AAC(UniMod:4)LLPK1\", \"M(UniMod:35)KPVPDLVPGNFK2\", \"EGIVEYPR2\"),    \"traceR_precursor_unknownMods\" = c(FALSE, FALSE, FALSE) )  # Connect Precursor and ProteinGroup level diann_connected <- connect_traceR_levels(input_df = diann, level = \"proteinGroups\")  spectronaut_connected <- connect_traceR_levels(input_df = spectronaut, level = \"proteinGroups\")"},{"path":"/reference/convert_all_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion of software specific levels — convert_all_levels","title":"Conversion of software specific levels — convert_all_levels","text":"Conversion precursor, modified peptide proteinGroup entries standardized format.","code":""},{"path":"/reference/convert_all_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion of software specific levels — convert_all_levels","text":"","code":"convert_all_levels(   input_df,   input_MQ_pg,   software = c(\"MaxQuant\", \"DIA-NN\", \"Spectronaut\", \"PD\") )"},{"path":"/reference/convert_all_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion of software specific levels — convert_all_levels","text":"input_df tibble precursor, modified peptide proteinGroup level information. MaxQuant: evidence.txt proteinGroups.txt, PD: PSMs.txt R-friendly headers enabled, DIA-NN Spectronaut default output reports. input_MQ_pg MaxQuant: tibble proteinGroup level information - proteinGroups.txt. software used analysis software - MaxQuant, PD, DIA-NN Spectronaut. Default MaxQuant.","code":""},{"path":"/reference/convert_all_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion of software specific levels — convert_all_levels","text":"function returns original submitted tibble - input_df - including following new columns: traceR_precursor - software-independent standardized text precursor entries. traceR_precursor_unknownMods - logical value, TRUE: modification detected, converted standardized format. traceR_mod.peptides - software-independent standardized text modified peptide entries. traceR_mod.peptides_unknownMods - logical value, TRUE: modification detected, converted standardized format. traceR_proteinGroups - software-independent standardized text proteinGroups.","code":""},{"path":"/reference/convert_all_levels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conversion of software specific levels — convert_all_levels","text":"input entries converted software independent format. generated entries appended submitted dataframe.","code":""},{"path":"/reference/convert_all_levels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conversion of software specific levels — convert_all_levels","text":"Oliver Kardell","code":""},{"path":"/reference/convert_all_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion of software specific levels — convert_all_levels","text":"","code":"# Load libraries library(dplyr) library(stringr) library(tidyr) library(comprehenr) library(tibble)  # MaxQuant example data evidence <- tibble::tibble(   \"Modified sequence\" = c(\"_AACLLPK_\",    \"_ALTDM(Oxidation (M))PQM(Oxidation (M))R_\",    \"ALTDM(Dummy_Modification)PQMK\"),   Charge = c(2,2,3),   \"Protein group IDs\" = c(\"26\", \"86;17\", \"86;17\") )  proteingroups <- tibble::tibble( \"Protein IDs\" = c(\"A0A075B6P5;P01615;A0A087WW87;P01614;A0A075B6S6\", \"P02671\", \"P02672\"), id = c(26, 86, 17) )  # Conversion convert_all_levels(  input_df = evidence,  input_MQ_pg = proteingroups,  software = \"MaxQuant\" ) #> # A tibble: 5 x 10 #>   `Protein IDs`      id `Modified sequenc~ Precursor.Id  Charge traceR_mod.pept~ #>   <chr>           <dbl> <chr>              <chr>          <dbl> <chr>            #> 1 A0A075B6P5;P01~    26 _AACLLPK_          AACLLPK2           2 AACLLPK          #> 2 P02671             86 _ALTDM(Oxidation ~ ALTDM(Oxidat~      2 ALTDM(UniMod:35~ #> 3 P02671             86 ALTDM(Dummy_Modif~ ALTDM(DummyM~      3 ALTDM(DummyModi~ #> 4 P02672             17 _ALTDM(Oxidation ~ ALTDM(Oxidat~      2 ALTDM(UniMod:35~ #> 5 P02672             17 ALTDM(Dummy_Modif~ ALTDM(DummyM~      3 ALTDM(DummyModi~ #> # ... with 4 more variables: traceR_mod.peptides_unknownMods <lgl>, #> #   traceR_precursor <chr>, traceR_precursor_unknownMods <lgl>, #> #   traceR_proteinGroups <chr>"},{"path":"/reference/convert_modified_peptides.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion of software specific modified peptide entries — convert_modified_peptides","title":"Conversion of software specific modified peptide entries — convert_modified_peptides","text":"Modified peptide entries converted common text representation","code":""},{"path":"/reference/convert_modified_peptides.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion of software specific modified peptide entries — convert_modified_peptides","text":"","code":"convert_modified_peptides(   input_df,   software = c(\"MaxQuant\", \"PD\", \"DIA-NN\", \"Spectronaut\") )"},{"path":"/reference/convert_modified_peptides.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion of software specific modified peptide entries — convert_modified_peptides","text":"input_df tibble modified peptide level information. MaxQuant: evidence.txt, PD: PSMs.txt R-friendly headers enabled, DIA-NN Spectronaut default output reports. software used analysis software input_df - MaxQuant, PD, DIA-NN Spectronaut. Default MaxQuant.","code":""},{"path":"/reference/convert_modified_peptides.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion of software specific modified peptide entries — convert_modified_peptides","text":"function returns original submitted tibble - input_df - including two new columns: traceR_mod.peptides - software-independent standardized text modified peptide entries. traceR_mod.peptides_unknownMods - logical value, TRUE: modification detected, converted standardized text.","code":""},{"path":"/reference/convert_modified_peptides.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conversion of software specific modified peptide entries — convert_modified_peptides","text":"input entries converted software independent format. generated entries appended submitted dataframe. Conversion modifications currently available UniMod:35 UniMod:4. modifications converted standardized format.","code":""},{"path":"/reference/convert_modified_peptides.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conversion of software specific modified peptide entries — convert_modified_peptides","text":"Oliver Kardell","code":""},{"path":"/reference/convert_modified_peptides.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion of software specific modified peptide entries — convert_modified_peptides","text":"","code":"# Load libraries library(dplyr) library(stringr) library(tidyr) library(tibble)  # MaxQuant example data data <- tibble::tibble(  \"Modified sequence\" = c(\"_AACLLPK_\",   \"_ALTDM(Oxidation (M))PQM(Oxidation (M))R_\",   \"ALTDM(Dummy_Modification)PQMK\"),   Charge = c(2,2,3) )  # Conversion convert_modified_peptides(  input_df = data,  software = \"MaxQuant\" ) #> # A tibble: 3 x 5 #>   `Modified sequence` Precursor.Id    Charge traceR_mod.pepti~ traceR_mod.pepti~ #>   <chr>               <chr>            <dbl> <chr>             <lgl>             #> 1 _AACLLPK_           AACLLPK2             2 AACLLPK           FALSE             #> 2 _ALTDM(Oxidation (~ ALTDM(Oxidatio~      2 ALTDM(UniMod:35)~ FALSE             #> 3 ALTDM(Dummy_Modifi~ ALTDM(DummyMod~      3 ALTDM(DummyModif~ TRUE"},{"path":"/reference/convert_precursor.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion of software specific precursor entries — convert_precursor","title":"Conversion of software specific precursor entries — convert_precursor","text":"Precursor entries converted common text representation","code":""},{"path":"/reference/convert_precursor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion of software specific precursor entries — convert_precursor","text":"","code":"convert_precursor(   input_df,   software = c(\"MaxQuant\", \"PD\", \"DIA-NN\", \"Spectronaut\") )"},{"path":"/reference/convert_precursor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion of software specific precursor entries — convert_precursor","text":"input_df tibble precursor level information. MaxQuant: evidence.txt, PD: PSMs.txt R-friendly headers enabled, DIA-NN Spectronaut default output reports. software used analysis software input_df - MaxQuant, PD, DIA-NN Spectronaut. Default MaxQuant.","code":""},{"path":"/reference/convert_precursor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion of software specific precursor entries — convert_precursor","text":"function returns original submitted tibble - input_df - including two new columns: traceR_precursor - software-independent standardized text precursor entries. traceR_precursor_unknownMods - logical value, TRUE: modification detected, converted standardized text.","code":""},{"path":"/reference/convert_precursor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conversion of software specific precursor entries — convert_precursor","text":"input entries converted software independent format. generated entries appended submitted dataframe. Conversion modifications currently available UniMod:35 UniMod:4. modifications converted standardized format.","code":""},{"path":"/reference/convert_precursor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conversion of software specific precursor entries — convert_precursor","text":"Oliver Kardell","code":""},{"path":"/reference/convert_precursor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion of software specific precursor entries — convert_precursor","text":"","code":"# Load libraries library(dplyr) library(stringr) library(tidyr) library(tibble)  # MaxQuant example data data <- tibble::tibble(  \"Modified sequence\" = c(\"_AACLLPK_\",  \"_ALTDM(Oxidation (M))PQM(Oxidation (M))R_\",  \"ALTDM(Dummy_Modification)PQMK\"),   Charge = c(2,2,3) )  # Conversion convert_precursor(  input_df = data,  software = \"MaxQuant\" ) #> # A tibble: 3 x 5 #>   `Modified sequence` Precursor.Id    Charge traceR_precursor  traceR_precursor~ #>   <chr>               <chr>            <dbl> <chr>             <lgl>             #> 1 _AACLLPK_           AACLLPK2             2 AACLLPK2          FALSE             #> 2 _ALTDM(Oxidation (~ ALTDM(Oxidatio~      2 ALTDM(UniMod:35)~ FALSE             #> 3 ALTDM(Dummy_Modifi~ ALTDM(DummyMod~      3 ALTDM(DummyModif~ TRUE"},{"path":"/reference/convert_proteingroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion of software specific proteinGroups — convert_proteingroups","title":"Conversion of software specific proteinGroups — convert_proteingroups","text":"ProteinGroups converted common text representation","code":""},{"path":"/reference/convert_proteingroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion of software specific proteinGroups — convert_proteingroups","text":"","code":"convert_proteingroups(   input_df,   software = c(\"MaxQuant\", \"DIA-NN\", \"Spectronaut\", \"PD\") )"},{"path":"/reference/convert_proteingroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion of software specific proteinGroups — convert_proteingroups","text":"input_df tibble proteinGroup level information. MaxQuant: proteinGroups.txt, PD: PSMs.txt R-friendly headers enabled, DIA-NN Spectronaut default output reports. software used analysis software input_df - MaxQuant, PD, DIA-NN Spectronaut. Default MaxQuant.","code":""},{"path":"/reference/convert_proteingroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion of software specific proteinGroups — convert_proteingroups","text":"function returns original submitted tibble - input_df - including one new column: traceR_proteinGroups - software-independent standardized text proteinGroups.","code":""},{"path":"/reference/convert_proteingroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conversion of software specific proteinGroups — convert_proteingroups","text":"input entries converted software independent format. generated entries appended submitted dataframe.","code":""},{"path":"/reference/convert_proteingroups.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conversion of software specific proteinGroups — convert_proteingroups","text":"Oliver Kardell","code":""},{"path":"/reference/convert_proteingroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion of software specific proteinGroups — convert_proteingroups","text":"","code":"# Load libraries library(dplyr) library(stringr) library(comprehenr) library(tibble)  # MaxQuant example data data <- tibble::tibble( \"Protein IDs\" = c(\"A0A075B6P5;P01615;A0A087WW87;P01614;A0A075B6S6\", \"P02671\", \"P02672\"), id = c(26, 86, 17) )  # Conversion convert_proteingroups(  input_df = data,  software = \"MaxQuant\" ) #> # A tibble: 3 x 3 #>   `Protein IDs`                          id traceR_proteinGroups                 #>   <chr>                               <dbl> <chr>                                #> 1 A0A075B6P5;P01615;A0A087WW87;P0161~    26 A0A075B6P5;A0A075B6S6;A0A087WW87;P0~ #> 2 P02671                                 86 P02671                               #> 3 P02672                                 17 P02672"},{"path":"/reference/flowTraceR.html","id":null,"dir":"Reference","previous_headings":"","what":"flowTraceR: a package for standardization of level information and tracking inter-software differences in bottom-up label-free proteomics — flowTraceR","title":"flowTraceR: a package for standardization of level information and tracking inter-software differences in bottom-up label-free proteomics — flowTraceR","text":"Useful functions standardize software outputs ProteomeDiscoverer, Spectronaut, DIA-NN MaxQuant precursor, modified peptide proteingroup level trace software differences identifications varying proteingroup denotations common precursor.","code":""},{"path":[]},{"path":"/reference/flowTraceR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"flowTraceR: a package for standardization of level information and tracking inter-software differences in bottom-up label-free proteomics — flowTraceR","text":"Maintainer: Oliver Kardell Okdll@gmx.net","code":""},{"path":"/reference/get_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Create example data — get_example","title":"Create example data — get_example","text":"Example data ProteomeDiscoverer, Spectronaut, DIA-NN MaxQuant.","code":""},{"path":"/reference/get_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create example data — get_example","text":"","code":"get_example(   example = c(\"MaxQuant\", \"DIA-NN\", \"Spectronaut\", \"PD\", \"RetentionTime\") )"},{"path":"/reference/get_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create example data — get_example","text":"example Choose \"ProteomeDiscoverer\", \"Spectronaut\", \"DIA-NN\" \"MaxQuant\" example downstream analysis \"RetentionTime\". Default MaxQuant.","code":""},{"path":"/reference/get_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create example data — get_example","text":"function returns example data dataframe respective chosen example. \"MaxQuant\" list evidence/proteingroup dataframe. \"RetentionTime\" list Spectronaut/DIA-NN data including retention time information.","code":""},{"path":"/reference/get_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create example data — get_example","text":"Data software testing functions flowTraceR. Additional example data Spectronaut DIA-NN analyzing retention time distribution precursor level.","code":""},{"path":"/reference/get_example.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create example data — get_example","text":"Oliver Kardell","code":""},{"path":"/reference/get_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create example data — get_example","text":"","code":"# Spectronaut example data Spectronaut_data <- get_example(example = \"Spectronaut\")"},{"path":"/reference/get_unknown_mods.html","id":null,"dir":"Reference","previous_headings":"","what":"Check of converted modifications — get_unknown_mods","title":"Check of converted modifications — get_unknown_mods","text":"Check conversion UniMod-format identified modifications successful.","code":""},{"path":"/reference/get_unknown_mods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check of converted modifications — get_unknown_mods","text":"","code":"get_unknown_mods(input_string, pattern_start, pattern_end)"},{"path":"/reference/get_unknown_mods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check of converted modifications — get_unknown_mods","text":"input_string character column traceR_precursor string. pattern_start character software-dependent beginning representation modifications. pattern_end character software-dependent end representation modifications.","code":""},{"path":"/reference/get_unknown_mods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check of converted modifications — get_unknown_mods","text":"function returns vector logical values. function incorporated functions convert_precursor convert_modified_peptides; used generate unknownMods column : TRUE: modification detected, converted standardized text.","code":""},{"path":"/reference/get_unknown_mods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check of converted modifications — get_unknown_mods","text":"conversion standardized format convert_precursor convert_modified_peptides, entries modifications checked successful conversion. Conversion modifications currently available UniMod:35 UniMod:4. modifications converted standardized format.","code":""},{"path":"/reference/get_unknown_mods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check of converted modifications — get_unknown_mods","text":"Oliver Kardell","code":""},{"path":"/reference/get_unknown_mods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check of converted modifications — get_unknown_mods","text":"","code":"# Load libraries library(dplyr) library(stringr) library(tibble)  # Generate data data <- tibble::tibble(   \"traceR_precursor\" = c(\"AACLLPK\",    \"ALTDM(UniMod:35)PQM(UniMod:35)R2\",    \"ALTDM(DummyModification)PQMK3\") )  # Unknown modifications present? get_unknown_mods(input_string = data$traceR_precursor, pattern_start= \"(\", pattern_end = \")\") #> [1] FALSE FALSE  TRUE"},{"path":"/reference/trace_all_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace common and unique identifications between different software outputs for all levels — trace_all_levels","title":"Trace common and unique identifications between different software outputs for all levels — trace_all_levels","text":"Identifications two input data frames compared categorized unique common entries level.","code":""},{"path":"/reference/trace_all_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace common and unique identifications between different software outputs for all levels — trace_all_levels","text":"","code":"trace_all_levels(   input_df1,   input_df2,   analysis_name1 = \"input_df1\",   analysis_name2 = \"input_df2\",   filter_unknown_mods = TRUE )"},{"path":"/reference/trace_all_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace common and unique identifications between different software outputs for all levels — trace_all_levels","text":"input_df1 tibble flowTraceR's standardized precursor, modified peptide proteinGroup level information. input_df2 tibble flowTraceR's standardized precursor, modified peptide proteinGroup level information. analysis_name1 output tibble name input_df1 - default \"input_df1\". analysis_name2 output tibble name input_df2 - default \"input_df2\". filter_unknown_mods Logical value, default TRUE. TRUE, unknown modifications filtered - requires \"traceR_precursor_unknownMods\" \"traceR_mod.peptides_unknownMods\" column.","code":""},{"path":"/reference/trace_all_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace common and unique identifications between different software outputs for all levels — trace_all_levels","text":"function returns list original submitted tibbles - input_df1 input_df2 - following new columns: traceR_traced_precursor - categorization precursor level common unique entries. traceR_traced_mod.peptides - categorization modified peptide level common unique entries. traceR_traced_proteinGroups - categorization proteinGroups level common unique entries.","code":""},{"path":"/reference/trace_all_levels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trace common and unique identifications between different software outputs for all levels — trace_all_levels","text":"Based flowTraceR's standardized output format two software outputs can compared categorized common unique identifications - precursor, modified peptide proteinGroup level.","code":""},{"path":"/reference/trace_all_levels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Trace common and unique identifications between different software outputs for all levels — trace_all_levels","text":"Oliver Kardell","code":""},{"path":"/reference/trace_all_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trace common and unique identifications between different software outputs for all levels — trace_all_levels","text":"","code":"# Load libraries library(dplyr) library(stringr) library(tibble)  # DIA-NN example data diann <- tibble::tibble(   \"traceR_proteinGroups\" = c(\"P02768\", \"P02671\", \"Q92496\", \"DummyProt\"),   \"traceR_mod.peptides\" = c(\"AAC(UniMod:4)LLPK\", \"RLEVDIDIK\",    \"EGIVEYPR\", \"ALTDM(DummyModification)PQMK\"),   \"traceR_mod.peptides_unknownMods\" = c(FALSE, FALSE, FALSE, TRUE),   \"traceR_precursor\" = c(\"AAC(UniMod:4)LLPK1\", \"RLEVDIDIK2\",    \"EGIVEYPR2\", \"ALTDM(DummyModification)PQMK3\" ),   \"traceR_precursor_unknownMods\" = c(FALSE, FALSE, FALSE, TRUE) ) # Spectronaut example data spectronaut <- tibble::tibble(   \"traceR_proteinGroups\" = c(\"P02768\", \"Q02985\", \"P02671\"),   \"traceR_mod.peptides\" = c(\"AAC(UniMod:4)LLPK\", \"EGIVEYPR\", \"M(UniMod:35)KPVPDLVPGNFK\"),   \"traceR_mod.peptides_unknownMods\" = c(FALSE, FALSE, FALSE),   \"traceR_precursor\" = c(\"AAC(UniMod:4)LLPK1\", \"EGIVEYPR2\", \"M(UniMod:35)KPVPDLVPGNFK2\"),   \"traceR_precursor_unknownMods\" = c(FALSE, FALSE, FALSE) )  # trace all levels in one step traced_all <- trace_all_levels(   input_df1 = diann,   input_df2 = spectronaut,   analysis_name1 = \"DIA-NN\",   analysis_name2 = \"Spectronaut\",   filter_unknown_mods = TRUE )"},{"path":"/reference/trace_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace common and unique identifications between different software outputs — trace_level","title":"Trace common and unique identifications between different software outputs — trace_level","text":"Identifications two input data frames compared categorized unique common entries.","code":""},{"path":"/reference/trace_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace common and unique identifications between different software outputs — trace_level","text":"","code":"trace_level(   input_df1,   input_df2,   analysis_name1 = \"input_df1\",   analysis_name2 = \"input_df2\",   level = c(\"precursor\", \"modified_peptides\", \"proteinGroups\"),   filter_unknown_mods = TRUE )"},{"path":"/reference/trace_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace common and unique identifications between different software outputs — trace_level","text":"input_df1 tibble flowTraceR's standardized precursor, modified peptide, proteinGroup level information - required column depends chosen level. input_df2 tibble flowTraceR's standardized precursor, modified peptide,  proteinGroup level information - required column depends chosen level. analysis_name1 output tibble name input_df1 - default \"input_df1\". analysis_name2 output tibble name input_df2 - default \"input_df2\". level \"precursor\", \"modified_peptides\", \"proteinGroups\" - respective level tracing common vs. unique entries. Default precursor. filter_unknown_mods Logical value, default TRUE. TRUE, unknown modifications filtered - requires \"traceR_precursor_unknownMods\" \"traceR_mod.peptides_unknownMods\" column; depends chosen level.","code":""},{"path":"/reference/trace_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace common and unique identifications between different software outputs — trace_level","text":"function returns list original submitted tibbles - input_df1 input_df2 - including one following new columns depending chosen level : traceR_traced_precursor - categorization precursor level common unique entries. traceR_traced_mod.peptides - categorization modified peptide level common unique entries. traceR_traced_proteinGroups - categorization proteinGroups level common unique entries.","code":""},{"path":"/reference/trace_level.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trace common and unique identifications between different software outputs — trace_level","text":"Based flowTraceR's standardized output format two software outputs can compared categorized common unique identifications chosen level: precursor, modified peptide proteinGroup level.","code":""},{"path":"/reference/trace_level.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Trace common and unique identifications between different software outputs — trace_level","text":"Oliver Kardell","code":""},{"path":"/reference/trace_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trace common and unique identifications between different software outputs — trace_level","text":"","code":"# Load libraries library(dplyr) library(stringr) library(tibble)  # DIA-NN example data diann <- tibble::tibble(   \"traceR_proteinGroups\" = c(\"P02768\", \"P02671\", \"Q92496\", \"DummyProt\"),   \"traceR_mod.peptides\" = c(\"AAC(UniMod:4)LLPK\", \"RLEVDIDIK\",    \"EGIVEYPR\", \"ALTDM(DummyModification)PQMK\"),   \"traceR_mod.peptides_unknownMods\" = c(FALSE, FALSE, FALSE, TRUE),   \"traceR_precursor\" = c(\"AAC(UniMod:4)LLPK1\", \"RLEVDIDIK2\",    \"EGIVEYPR2\", \"ALTDM(DummyModification)PQMK3\" ),   \"traceR_precursor_unknownMods\" = c(FALSE, FALSE, FALSE, TRUE) )  # Spectronaut example data spectronaut <- tibble::tibble(   \"traceR_proteinGroups\" = c(\"P02768\", \"Q02985\", \"P02671\"),   \"traceR_mod.peptides\" = c(\"AAC(UniMod:4)LLPK\", \"EGIVEYPR\", \"M(UniMod:35)KPVPDLVPGNFK\"),   \"traceR_mod.peptides_unknownMods\" = c(FALSE, FALSE, FALSE),   \"traceR_precursor\" = c(\"AAC(UniMod:4)LLPK1\", \"EGIVEYPR2\", \"M(UniMod:35)KPVPDLVPGNFK2\"),   \"traceR_precursor_unknownMods\" = c(FALSE, FALSE, FALSE) )  # trace proteinGroup level traced_proteinGroups <- trace_level(   input_df1 = diann,   input_df2 = spectronaut,   analysis_name1 = \"DIA-NN\",   analysis_name2 = \"Spectronaut\",   level = \"proteinGroups\",   filter_unknown_mods = TRUE )  # trace precursor level traced_pecursor <- trace_level(   input_df1 = diann,   input_df2 = spectronaut,   analysis_name1 = \"DIA-NN\",   analysis_name2 = \"Spectronaut\",   level = \"precursor\",   filter_unknown_mods = TRUE )"},{"path":"/reference/trace_unique_common_pg.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace unique_common categorization for proteinGroup level — trace_unique_common_pg","title":"Trace unique_common categorization for proteinGroup level — trace_unique_common_pg","text":"Unique_common categorizations analyzed proteinGroup level","code":""},{"path":"/reference/trace_unique_common_pg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace unique_common categorization for proteinGroup level — trace_unique_common_pg","text":"","code":"trace_unique_common_pg(   input_df1,   input_df2,   analysis_name1 = \"input_df1\",   analysis_name2 = \"input_df2\",   string_analysis = FALSE )"},{"path":"/reference/trace_unique_common_pg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace unique_common categorization for proteinGroup level — trace_unique_common_pg","text":"input_df1 tibble flowTraceR's unique_common categorization proteinGroup_precursor connection. input_df2 tibble counter part input_df1 - used generate unique_common categorization proteinGroup_precursor connection. analysis_name1 String. Appended input_df1's traceR_proteinGroups column - default \"input_df1\". analysis_name2 String. Appended input_df1's traceR_proteinGroups column - default \"input_df2\". string_analysis Logical value, default FALSE. TRUE, keeps proteinGroup identifications input_df1 protein denotations present counterpart - proteinGroups input_df2 - vice versa.","code":""},{"path":"/reference/trace_unique_common_pg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace unique_common categorization for proteinGroup level — trace_unique_common_pg","text":"function returns tibble following columns : traceR_proteinGroups_input_df1 - proteinGroup denotations input_df1 common precursor input_df1 input_df2 traceR_precursor - common precursor input_df1 input_df2 traceR_proteinGroups_input_df2 - proteinGroup denotations input_df2 common precursor input_df1 input_df2","code":""},{"path":"/reference/trace_unique_common_pg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trace unique_common categorization for proteinGroup level — trace_unique_common_pg","text":"submitted dataframe unique_common proteinGroup_precursor connection analyzed highlight potential differences proteinGroup denotations common precursors.","code":""},{"path":"/reference/trace_unique_common_pg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Trace unique_common categorization for proteinGroup level — trace_unique_common_pg","text":"Oliver Kardell","code":""},{"path":"/reference/trace_unique_common_pg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trace unique_common categorization for proteinGroup level — trace_unique_common_pg","text":"","code":"# Load libraries library(dplyr) library(stringr) library(tibble)  # DIA-NN example data diann <- tibble::tibble(   \"traceR_connected_pg_prec\" = c(\"common_common\", \"common_unique\",   \"unique_common\", \"unique_common\"),   \"traceR_proteinGroups\" = c(\"P02768\", \"P02671\", \"Q92496\", \"P04433\"),   \"traceR_precursor\" = c(\"AAC(UniMod:4)LLPK1\", \"RLEVDIDIK2\",   \"EGIVEYPR2\", \"ASQSVSSYLAWYQQK2\"), )  # Spectronaut example data spectronaut <- tibble::tibble(   \"traceR_connected_pg_prec\" = c(\"common_common\", \"common_unique\",   \"unique_common\", \"unique_common\"),   \"traceR_proteinGroups\" = c(\"P02768\", \"P02671\", \"Q02985\", \"A0A0A0MRZ8;P04433\"),   \"traceR_precursor\" = c(\"AAC(UniMod:4)LLPK1\", \"M(UniMod:35)KPVPDLVPGNFK2\",   \"EGIVEYPR2\", \"ASQSVSSYLAWYQQK2\"), )  # Find difference in pg denotation # string_analysis = TRUE resultA <- trace_unique_common_pg(input_df1 = diann,  input_df2 = spectronaut,  analysis_name1 = \"DIA-NN\",  analysis_name2 = \"Spectronaut\",  string_analysis = TRUE)  # Find difference in pg denotation # string_analysis = FALSE # compare with resultA resultB <- trace_unique_common_pg(input_df1 = diann,  input_df2 = spectronaut,  analysis_name1 = \"DIA-NN\",  analysis_name2 = \"Spectronaut\",  string_analysis = FALSE)"},{"path":"/news/index.html","id":"flowtracer-010","dir":"Changelog","previous_headings":"","what":"flowTraceR 0.1.0","title":"flowTraceR 0.1.0","text":"CRAN release: 2022-06-03 First release version.","code":""}]
