check("flowTraceR")
library(devtools)
check("flowTraceR
")
check("C:/Users/Olive/Desktop/HomeOffice/CommunicatR/Project_Shiny/flowTraceR")
library(devtools)
load_all()
#library(flowTraceR)
library(magrittr)
library(dplyr)
library(tidyr)
library(stringr)
library(tibble)
library(ggplot2)
library(data.table)
library(kableExtra)
# Get example data
diann <- flowTraceR::get_example("RetentionTime")[["DIA-NN"]]
spectronaut <- flowTraceR::get_example("RetentionTime")[["Spectronaut"]]
# Convert all levels
diann_all_converted <- convert_all_levels(input_df = diann, software = "DIA-NN")
spectronaut_all_converted <- convert_all_levels(input_df = spectronaut, software = "Spectronaut")
#Example - DIA-NN output
#get common entries based on software-specific entries
diann_common <- semi_join(
diann_all_converted,
spectronaut_all_converted,
by = c("Precursor.Id" = "EG.PrecursorId")
)
#get unique entries based on software-specific entries
diann_unique <- anti_join(
diann_all_converted,
spectronaut_all_converted,
by = c("Precursor.Id" = "EG.PrecursorId")
)
#connect
diann <- bind_rows(
common = diann_common,
unique = diann_unique,
.id = "characteristic"
)
#plot
#no common entries detected!
ggplot(diann, aes(x = RT, color = characteristic)) +
geom_density()
#Example - DIA-NN output
#get common entries based on flowTraceR´s entries
diann_common_traceR <- semi_join(
diann_all_converted,
spectronaut_all_converted,
by = c("traceR_precursor")
)
#get unique entries based on flowTraceR´s entries
diann_unique_traceR <- anti_join(
diann_all_converted,
spectronaut_all_converted,
by = c("traceR_precursor")
)
#connect
diann_traceR <- bind_rows(
common = diann_common_traceR,
unique = diann_unique_traceR,
.id = "characteristic"
)
#plot
ggplot(diann_traceR, aes(x = RT, color = characteristic)) +
geom_density()
spectronaut_common_traceR <- semi_join(
spectronaut_all_converted,
diann_all_converted,
by = c("traceR_precursor")
) %>%
rename(
RT = EG.ApexRT
)
RT_common <- bind_rows(
"DIA-NN" = diann_common_traceR[,"RT"],
Spectronaut = spectronaut_common_traceR[, "RT"],
.id = "Software"
)
ggplot(RT_common, aes(x = RT, color = Software)) +
geom_density()
View(spectronaut_common_traceR)
View(diann_common_traceR)
View(diann_traceR)
View(RT_common)
View(diann_common)
View(spectronaut_common_traceR)
View(diann_traceR)
ggplot(RT_common, aes(x = RT, color = Software)) +
geom_density() +
scale_x_continuous(expand=c(0,0),limits = c(0,110)
ggplot(RT_common, aes(x = RT, color = Software)) +
ggplot(RT_common, aes(x = RT, color = Software)) +
geom_density() +
scale_x_continuous(expand=c(0,0),limits = c(0,110))
ggplot(RT_common, aes(x = RT, color = Software)) +
geom_density() +
scale_x_continuous(limits = c(0,110))
ggplot(RT_common, aes(x = RT, color = Software)) +
geom_density() +
scale_x_continuous(limits = c(0,110))
#Spectronaut unique entries
spectronaut_unique_traceR <- anti_join(
spectronaut_all_converted,
diann_all_converted,
by = c("traceR_precursor")
) %>%
rename(
RT = EG.ApexRT
)
#Unique entries combined
RT_unique <- bind_rows(
"DIA-NN" = diann_unique_traceR[,"RT"],
Spectronaut = spectronaut_unique_traceR[, "RT"],
.id = "Software"
)
#Plot
ggplot(RT_unique, aes(x = RT, color = Software)) +
geom_density() +
scale_x_continuous(limits = c(0,110))
View(spectronaut_all_converted)
View(spectronaut_unique_traceR)
View(diann_unique_traceR)
document()
example(convert_precursor)
example("convert_precursor")
load_all()
example("convert_precursor")
example(convert_precursor)
library(flowTraceR)
?
convert_precursor()
data <- tibble::tibble(
"Modified sequence" = c("_AACLLPK_",
"_ALTDM(Oxidation (M))PQM(Oxidation (M))R_",
"ALTDM(Dummy_Modification)PQMK"),
Charge = c(2,2,3)
)
# Conversion
convert_precursor(
input_df = data,
software = "MaxQuant"
)
?trace_all_levels
diann <- tibble::tibble(
"traceR_proteinGroups" = c("P02768", "P02671", "Q92496", "DummyProt"),
"traceR_mod.peptides" = c("AAC(UniMod:4)LLPK", "RLEVDIDIK",
"EGIVEYPR", "ALTDM(DummyModification)PQMK"),
"traceR_mod.peptides_unknownMods" = c(FALSE, FALSE, FALSE, TRUE),
"traceR_precursor" = c("AAC(UniMod:4)LLPK1", "RLEVDIDIK2",
"EGIVEYPR2", "ALTDM(DummyModification)PQMK3" ),
"traceR_precursor_unknownMods" = c(FALSE, FALSE, FALSE, TRUE)
)
# Spectronaut example data
spectronaut <- tibble::tibble(
"traceR_proteinGroups" = c("P02768", "Q02985", "P02671"),
"traceR_mod.peptides" = c("AAC(UniMod:4)LLPK", "EGIVEYPR", "M(UniMod:35)KPVPDLVPGNFK"),
"traceR_mod.peptides_unknownMods" = c(FALSE, FALSE, FALSE),
"traceR_precursor" = c("AAC(UniMod:4)LLPK1", "EGIVEYPR2", "M(UniMod:35)KPVPDLVPGNFK2"),
"traceR_precursor_unknownMods" = c(FALSE, FALSE, FALSE)
)
# trace all levels in one step
traced_all <- trace_all_levels(
input_df1 = diann,
input_df2 = spectronaut,
analysis_name1 = "DIA-NN",
analysis_name2 = "Spectronaut",
filter_unknown_mods = TRUE
)
traced_all
?analyze_connected_levels
library(flowTraceR)
load_all()
?analyze_connected_levels
library(flowTraceR)
?analyze_connected_levels
library(flowTraceR)
?analyze_connected_levels
?analyze_unknown_mods
library(flowTraceR)
?analyze_connected_levels
?analyze_connected_levels
library(flowTraceR)
?analyze_connected_levels
?analyze_unknown_mods
library(flowTraceR)
?connect_traceR_levels
?convert_all_levels
?convert_modified_peptides
?convert_precursor
?convert_proteingroups
?get_example
document()
library(devtools)
document()
library(flowTraceR)
?get_example
document()
?get_unknown_mods
?trace_all_levels
document()
library(flowTraceR)
?trace_all_levels
?trace_level
?trace_unique_common_pg
document
document()
library(flowTraceR)
devtools::install_github("flowTraceR")
library(devtools)
install.packages("flowTraceR
")
R.version
library(available)
available_on_cran("flowTraceR")
available_on_bioc("flowTraceR")
check("flowTraceR")
get_wd()
getwd
getwd()
check(getwd())
library(devtools)
use_news_md()
use_version()
use_version()
use_mit_license("Oliver Kardell")
use_mit_license("Oliver Kardell")
use_travis()
use_github_actions()
library(pkgdown)
install.packages("pkgdown")
install.packages("pkgdown")
install.packages("pkgdown")
install.packages("pkgdown")
library(pkgdown)
pkgdown::build_site()
pkgdown::build_site()
document()
library(devtools)
library(devtools)
check("flowtraceR")
check("C:/Users/Olive/Desktop/HomeOffice/CommunicatR/Project_Shiny/flowTraceR/flowTraceR")
document()
document()
library(ggplot2)
check("C:/Users/Olive/Desktop/HomeOffice/CommunicatR/Project_Shiny/flowTraceR/flowTraceR")
check("C:/Users/Olive/Desktop/HomeOffice/CommunicatR/Project_Shiny/flowTraceR/flowTraceR")
use_this::use_pkgdown
library(devtools)
usethis::use_pkgdown()
check("C:/Users/Olive/Desktop/HomeOffice/CommunicatR/Project_Shiny/flowTraceR/flowTraceR")
?check()
check("C:/Users/Olive/Desktop/HomeOffice/CommunicatR/Project_Shiny/flowTraceR/flowTraceR", _R_CHECK_DOC_SIZES_=FALSE)
check("C:/Users/Olive/Desktop/HomeOffice/CommunicatR/Project_Shiny/flowTraceR/flowTraceR")
library(devtools)
check("C:/Users/Olive/Desktop/HomeOffice/CommunicatR/Project_Shiny/flowTraceR/flowTraceR")
old_path <- Sys.getenv("PATH")
Sys.setenv(PATH = paste(old_path, "C:\Program Files\qpdf-7.0.0\bin", sep = ":"))
Sys.setenv(PATH = paste(old_path, "C:/Program Files/qpdf-7.0.0/bin", sep = ":"))
library(devtools)
check("C:/Users/Olive/Desktop/HomeOffice/CommunicatR/Project_Shiny/flowTraceR/flowTraceR")
install.packages("pathR")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
Sys.setenv(PATH = paste(old_path, "C:/Program Files/qpdf-7.0.0/bin", sep = ";"))
Sys.getenv("PATH")
